/*
 * dynamic_allocator.c
 *
 *  Created on: Sep 21, 2023
 *      Author: HP
 */
#include <inc/assert.h>
#include <inc/string.h>
#include "../inc/dynamic_allocator.h"


//==================================================================================//
//============================== GIVEN FUNCTIONS ===================================//
//==================================================================================//

//=====================================================
// 1) GET BLOCK SIZE (including size of its meta data):
//=====================================================
__inline__ uint32 get_block_size(void* va)
{
	uint32 *curBlkMetaData = ((uint32 *)va - 1) ;
	return (*curBlkMetaData) & ~(0x1);
}

//===========================
// 2) GET BLOCK STATUS:
//===========================
__inline__ int8 is_free_block(void* va)
{
	uint32 *curBlkMetaData = ((uint32 *)va - 1) ;
	return (~(*curBlkMetaData) & 0x1) ;
}

//===========================
// 3) ALLOCATE BLOCK:
//===========================

void *alloc_block(uint32 size, int ALLOC_STRATEGY)
{
	void *va = NULL;
	switch (ALLOC_STRATEGY)
	{
	case DA_FF:
		va = alloc_block_FF(size);
		break;
	case DA_NF:
		va = alloc_block_NF(size);
		break;
	case DA_BF:
		va = alloc_block_BF(size);
		break;
	case DA_WF:
		va = alloc_block_WF(size);
		break;
	default:
		cprintf("Invalid allocation strategy\n");
		break;
	}
	return va;
}

//===========================
// 4) PRINT BLOCKS LIST:
//===========================

void print_blocks_list(struct MemBlock_LIST list)
{
	cprintf("=========================================\n");
	struct BlockElement* blk ;
	cprintf("\nDynAlloc Blocks List:\n");
	LIST_FOREACH(blk, &list)
	{
		cprintf("(size: %d, isFree: %d)\n", get_block_size(blk), is_free_block(blk)) ;
	}
	cprintf("=========================================\n");

}
//
////********************************************************************************//
////********************************************************************************//

//==================================================================================//
//============================ REQUIRED FUNCTIONS ==================================//
//==================================================================================//

bool is_initialized = 0;
//==================================
// [1] INITIALIZE DYNAMIC ALLOCATOR:
//==================================
void initialize_dynamic_allocator(uint32 daStart, uint32 initSizeOfAllocatedSpace)
{
	//==================================================================================
	//DON'T CHANGE THESE LINES==========================================================
	//==================================================================================
	{
		if (initSizeOfAllocatedSpace % 2 != 0) initSizeOfAllocatedSpace++; //ensure it's multiple of 2
		if (initSizeOfAllocatedSpace == 0)
			return ;
		is_initialized = 1;
	}
	//==================================================================================
	//==================================================================================

	//TODO: [PROJECT'24.MS1 - #04] [3] DYNAMIC ALLOCATOR - initialize_dynamic_allocator
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
    //panic("initialize_dynamic_allocator is not implemented yet");
	//Your Code is Here...
	LIST_INIT(&freeBlocksList);

	uint32* BEG_Block =(uint32*) daStart ;
    uint32* END_Block =(uint32*) (daStart + initSizeOfAllocatedSpace - sizeof(uint32)) ;
    uint32* Header = (uint32*) (daStart + sizeof(uint32));
    uint32* Footer = (uint32*) (daStart + initSizeOfAllocatedSpace - 2 * sizeof(uint32));

    *Header = (initSizeOfAllocatedSpace - 2 * sizeof(uint32)) ;
    *Footer = (initSizeOfAllocatedSpace - 2 * sizeof(uint32)) ;
    struct BlockElement* firstFreeBlock = (struct BlockElement*)(daStart + 2* sizeof(uint32));

    *BEG_Block = 0x0001;
    *END_Block = 0x0001;
    freeBlocksList.lh_first = firstFreeBlock;
    freeBlocksList.size = 1;
    LIST_HEAD(freeBlocksList , firstFreeBlock);

    //set Block Test
    void * va = (void*)0x0000ffde;
    set_block_data(va,2*sizeof(int), 0);
    int8 res = is_free_block(va);
    panic("IS FREE BLOCK: &d\n\n",res);
}
//==================================
// [2] SET BLOCK HEADER & FOOTER:
//==================================
void set_block_data(void* va, uint32 totalSize, bool isAllocated)
{
	//TODO: [PROJECT'24.MS1 - #05] [3] DYNAMIC ALLOCATOR - set_block_data
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
//	panic("set_block_data is not implemented yet");
	//Your Code is Here...
	struct BlockElement* block = (struct BlockElement*)va;
	uint32* currentBlockMetaData = (uint32*)((uint32*)block - 1);
	uint32* header = va - 1;
	uint32* footer = va + get_block_size(va) - 1;
	*header = totalSize;
	*footer = totalSize;
	*currentBlockMetaData &= isAllocated;

//	uint32 header_footer_data;
//	//lw allocated el flag = 1 lw la =0
//	if(isAllocated){
//		header_footer_data = totalSize | 1;
//	}
//	else{
//		header_footer_data = totalSize | 0;
//	}
//	//el header abl el address b 4 bytes
//	*(uint32*)(va - sizeof(uint32))  = header_footer_data;
//
//	//el footer 3nd el address + el size - size of el footer wl header
//	*(uint32*)(va + totalSize - 2*(sizeof(uint32))) = header_footer_data;
}


//=========================================
// [3] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
void *alloc_block_FF(uint32 size)
{
	//==================================================================================
	//DON'T CHANGE THESE LINES==========================================================
	//==================================================================================
	{
		if (size % 2 != 0) size++;	//ensure that the size is even (to use LSB as allocation flag)
		if (size < DYN_ALLOC_MIN_BLOCK_SIZE)
			size = DYN_ALLOC_MIN_BLOCK_SIZE ;
		if (!is_initialized)
		{
			uint32 required_size = size + 2*sizeof(int) /*header & footer*/ + 2*sizeof(int) /*da begin & end*/ ;
			uint32 da_start = (uint32)sbrk(ROUNDUP(required_size, PAGE_SIZE)/PAGE_SIZE);
			uint32 da_break = (uint32)sbrk(0);
			initialize_dynamic_allocator(da_start, da_break - da_start);
		}
	}
	//==================================================================================
	//==================================================================================

	//TODO: [PROJECT'24.MS1 - #06] [3] DYNAMIC ALLOCATOR - alloc_block_FF
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("alloc_block_FF is not implemented yet");
	//Your Code is Here...

}
//=========================================
// [4] ALLOCATE BLOCK BY BEST FIT:
//=========================================
void *alloc_block_BF(uint32 size)
{
	//TODO: [PROJECT'24.MS1 - BONUS] [3] DYNAMIC ALLOCATOR - alloc_block_BF
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("alloc_block_BF is not implemented yet");
	//Your Code is Here...

}

//===================================================
// [5] FREE BLOCK WITH COALESCING:
//===================================================
void free_block(void *va)
{
	//TODO: [PROJECT'24.MS1 - #07] [3] DYNAMIC ALLOCATOR - free_block
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("free_block is not implemented yet");
	//Your Code is Here...
}

//=========================================
// [6] REALLOCATE BLOCK BY FIRST FIT:
//=========================================
void *realloc_block_FF(void* va, uint32 new_size)
{
	//TODO: [PROJECT'24.MS1 - #08] [3] DYNAMIC ALLOCATOR - realloc_block_FF
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	//panic("realloc_block_FF is not implemented yet");
	//Your Code is Here...

	//

	if ( new_size < 16 || va == NULL) return NULL;
	if ((new_size ^ 1) != (new_size + 1)) new_size++;
	uint32 remainingSizeAfterReallocation = get_block_size(va) - new_size - sizeof(uint32);
	if (remainingSizeAfterReallocation >= 16) {
		uint32* currentBlockMetaData = ((uint32*)va - 1);
		*currentBlockMetaData = new_size | 1;
		//hana3mel hena free block
		return va;
	}
	struct BlockElement* searchingBlock = freeBlocksList.lh_first;
	struct BlockElement* foundBlock = NULL;
	while (searchingBlock != NULL) {
	    uint32 blockSize = get_block_size(searchingBlock);
	    if (blockSize - sizeof(uint32) >= new_size + 16 ) {
	    	foundBlock = searchingBlock;
	    	break;
	    }
	    searchingBlock = searchingBlock->prev_next_info.le_next;
	}
	if (foundBlock != NULL) {
		memcpy(foundBlock, va, get_block_size(va));
		uint32* new_Block_MetaData = ((uint32*)foundBlock - 1);
		*new_Block_MetaData = new_size | 1;
		LIST_REMOVE(&freeBlocksList, foundBlock);
		if (remainingSizeAfterReallocation > sizeof(uint32)) {
			//mafrood na3mel hena free Block
		}

		return foundBlock;
	}
//	else sbrk();
	return NULL;
}

/*********************************************************************************************/
/*********************************************************************************************/
/*********************************************************************************************/
//=========================================
// [7] ALLOCATE BLOCK BY WORST FIT:
//=========================================
void *alloc_block_WF(uint32 size)
{
	panic("alloc_block_WF is not implemented yet");
	return NULL;
}

//=========================================
// [8] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
void *alloc_block_NF(uint32 size)
{
	panic("alloc_block_NF is not implemented yet");
	return NULL;
}
