#include <inc/mmu.h>
#include <inc/x86.h>
#include <inc/assert.h>

#include <kern/memory_manager.h>
#include <kern/trap.h>
#include <kern/console.h>
#include <kern/command_prompt.h>
#include <kern/user_environment.h>
#include <kern/file_manager.h>
#include <kern/syscall.h>
#include <kern/sched.h>
#include <kern/kclock.h>
#include <kern/trap.h>

void page_fault_handler(struct Env * curenv, uint32 fault_va);
void table_fault_handler(struct Env * curenv, uint32 fault_va);

static struct Taskstate ts;

//2014 Test Free(): Set it to bypass the PAGE FAULT on an instruction with this length and continue executing the next one
// 0 means don't bypass the PAGE FAULT
uint8 bypassInstrLength = 0;


/// Interrupt descriptor table.  (Must be built at run time because
/// shifted function addresses can't be represented in relocation records.)
///

struct Gatedesc idt[256] = { { 0 } };
struct Pseudodesc idt_pd = {
		sizeof(idt) - 1, (uint32) idt
};
extern  void (*PAGE_FAULT)();
extern  void (*SYSCALL_HANDLER)();
extern  void (*DBL_FAULT)();

extern  void (*ALL_FAULTS0)();
extern  void (*ALL_FAULTS1)();
extern  void (*ALL_FAULTS2)();
extern  void (*ALL_FAULTS3)();
extern  void (*ALL_FAULTS4)();
extern  void (*ALL_FAULTS5)();
extern  void (*ALL_FAULTS6)();
extern  void (*ALL_FAULTS7)();
//extern  void (*ALL_FAULTS8)();
//extern  void (*ALL_FAULTS9)();
extern  void (*ALL_FAULTS10)();
extern  void (*ALL_FAULTS11)();
extern  void (*ALL_FAULTS12)();
extern  void (*ALL_FAULTS13)();
//extern  void (*ALL_FAULTS14)();
//extern  void (*ALL_FAULTS15)();
extern  void (*ALL_FAULTS16)();
extern  void (*ALL_FAULTS17)();
extern  void (*ALL_FAULTS18)();
extern  void (*ALL_FAULTS19)();


extern  void (*ALL_FAULTS32)();
extern  void (*ALL_FAULTS33)();
extern  void (*ALL_FAULTS34)();
extern  void (*ALL_FAULTS35)();
extern  void (*ALL_FAULTS36)();
extern  void (*ALL_FAULTS37)();
extern  void (*ALL_FAULTS38)();
extern  void (*ALL_FAULTS39)();
extern  void (*ALL_FAULTS40)();
extern  void (*ALL_FAULTS41)();
extern  void (*ALL_FAULTS42)();
extern  void (*ALL_FAULTS43)();
extern  void (*ALL_FAULTS44)();
extern  void (*ALL_FAULTS45)();
extern  void (*ALL_FAULTS46)();
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
	static const char * const excnames[] = {
			"Divide error",
			"Debug",
			"Non-Maskable Interrupt",
			"Breakpoint",
			"Overflow",
			"BOUND Range Exceeded",
			"Invalid Opcode",
			"Device Not Available",
			"Double Fault",
			"Coprocessor Segment Overrun",
			"Invalid TSS",
			"Segment Not Present",
			"Stack Fault",
			"General Protection",
			"Page Fault",
			"(unknown trap)",
			"x87 FPU Floating-Point Error",
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
		return excnames[trapno];
	if (trapno == T_SYSCALL)
		return "System call";
	return "(unknown trap)";
}


void
idt_init(void)
{
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
	ts.ts_ss0 = GD_KD;

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
}

void print_trapframe(struct Trapframe *tf)
{
	cprintf("TRAP frame at %p\n", tf);
	print_regs(&tf->tf_regs);
	cprintf("  es   0x----%04x\n", tf->tf_es);
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
	cprintf("  err  0x%08x\n", tf->tf_err);
	cprintf("  eip  0x%08x\n", tf->tf_eip);
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
	cprintf("  esp  0x%08x\n", tf->tf_esp);
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
}

void print_regs(struct PushRegs *regs)
{
	cprintf("  edi  0x%08x\n", regs->reg_edi);
	cprintf("  esi  0x%08x\n", regs->reg_esi);
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
	cprintf("  edx  0x%08x\n", regs->reg_edx);
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
	cprintf("  eax  0x%08x\n", regs->reg_eax);
}

static void trap_dispatch(struct Trapframe *tf)
{
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU())
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
	{
		panic("double fault!!");
	}
	else if (tf->tf_trapno == IRQ0_Clock)
	{
		clock_interrupt_handler() ;
	}

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
		{
			panic("unhandled trap in kernel");
		}
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
}

void trap(struct Trapframe *tf)
{
	kclock_stop();

	//struct Trapframe* old_tf = tf ;
	if ((tf->tf_cs & 3) == 3) {
		// Trapped from user mode.
		// Copy trap frame (which is currently on the stack)
		// into 'curenv->env_tf', so that running the environment
		// will restart at the trap point.
		assert(curenv);
		curenv->env_tf = *tf;
		// The trapframe on the stack should be ignored from here on.
		tf = &(curenv->env_tf);
	}

		//cprintf("KERNEL_TRAP================================================================\n");
		//cprintf("kernel: trap to be dispatched: %s # = %d, IP = %x\n", trapname(tf->tf_trapno), tf->tf_trapno, tf->tf_eip) ;
	if(tf->tf_trapno == IRQ0_Clock)
	{
		//		cprintf("Clock INT: EIP = %x, ECX = %x, EFlags = %x, SP = %x\n", tf->tf_eip, tf->tf_regs.reg_ecx, tf->tf_eflags, tf->tf_esp);
		//uint32 time_bef = time ;
		//cprintf("timenow bef lag in trap = %d\n", time);
		//		int cc=0; int ccc=0;
		//		for(;cc<35000; cc++)
		//		{
		//			ccc++;
		//		}
		//cprintf("timenow aft lag in trap= %d\n", time);

	}
	else if (tf->tf_trapno == T_PGFLT)
	{
		//2014: Bypass the faulted instruction by incrementing IP by the specified instruction length
		if (bypassInstrLength != 0)
		{
			curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
			env_run(curenv);
		}
	}
	// Dispatch based on what type of trap occurred
	trap_dispatch(tf);


	// Return to the current environment, which should be runnable.
	assert(curenv && curenv->env_status == ENV_READY);

	/// Mahmoud added code: I am here checking to see to where should
	/// the trap routine exit, to kernel code or to user code ?
	/// refer to : Intel 80386 Reference Programmer's Manual/s09_08.htm
	/// chapter 9.8.14
	{
		if((tf->tf_err & 0x4) == 0)
		{
			//cprintf("Last trap [%s] came from kernel mode, returning to kernel eip = %x\n",trapname(tf->tf_trapno), tf->tf_eip);
			//the Trap came from supervisor mode
			//LOG_STATMENT(cprintf("Last trap came from kernel mode, returning to kernel eip = %x",tf->tf_eip));
		}
		else
		{
			//cprintf("Last trap [%s] came from USER mode, returning to user eip = %x\n",trapname(tf->tf_trapno), tf->tf_eip);
			//the Trap came from user mode
			//LOG_STATMENT(cprintf("Last trap came from user mode, returning to user eip = %x",tf->tf_eip));
		}
	}

	//	tf = curenv->env_tf ;
	env_run(curenv);
}

void setPageReplacmentAlgorithmLRU(){_PageRepAlgoType = PG_REP_LRU;}
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}

uint32 isPageReplacmentAlgorithmLRU(){if(_PageRepAlgoType == PG_REP_LRU) return 1; return 0;}
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}

void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
uint32 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }

void detect_modified_loop()
{
	struct  Frame_Info * slowPtr = LIST_FIRST(&modified_frame_list);
	struct  Frame_Info * fastPtr = LIST_FIRST(&modified_frame_list);


	while (slowPtr && fastPtr) {
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
		{
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
		if (fastPtr == slowPtr) {
			cprintf("loop detected in modiflist\n");
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished modi loop detection\n");
}

void fault_handler(struct Trapframe *tf)
{
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (curenv->env_pgdir[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;

		table_fault_handler(faulted_env, fault_va);
	}
	else
	{
		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;

//		cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
//
//		cprintf("\nPage working set BEFORE fault handler...\n");
//		env_page_ws_print(curenv);

		page_fault_handler(faulted_env, fault_va);

//		cprintf("\nPage working set AFTER fault handler...\n");
//		env_page_ws_print(curenv);

	}

	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}


//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
	//panic("table_fault_handler() is not implemented yet...!!");
	//Check if it's a stack page
	uint32* ptr_table;
	create_page_table(curenv->env_pgdir, fault_va, &ptr_table);
}


//Handle the page fault
void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
	//TODO: [PROJECT 2015] PAGE FAULT HANDLER
	// your code is here, remove the panic and write your code
	//panic("page_fault_handler() is not implemented yet...!!");

	//refer to the project documentation for the detailed steps

	//cprintf("page fault va %08x\n", fault_va);


	//TODO: [PROJECT 2015 - BONUS2] Apply FIFO and modifiedCLOCK algorithms

	/*PROJECT2012 CODE*/

	uint32 victim_found = 0;
	int iWS =curenv->page_last_WS_index;
	uint32 wsSize = env_page_ws_get_size(curenv);

	if(wsSize < PAGE_WS_MAX_SIZE)
	{
		/* Do page placement ======================================= */
		LOG_STATMENT(cprintf("placing virtual_address %x",fault_va));
		uint32 i=0;
		for(;i < PAGE_WS_MAX_SIZE; i++)
		{
			if(curenv->pageWorkingSet[iWS].empty == 1) break;
			iWS++;
			iWS %= PAGE_WS_MAX_SIZE;
		}
	}
	else
	{

		/* Do page replacement ======================================= */
		curenv->pageFaultsCounter++;
		uint8 victim_modified = 0;
		uint32 victim_virtual_address=0;
		uint32 victim_page_permissions = 0;

		//			cprintf("[%08x] user page fault va %08x - PF Counter = %d\n", curenv->env_id, fault_va, curenv->pageFaultsCounter);

		if(isPageReplacmentAlgorithmCLOCK())
		{
			// [MODIFIED] CLOCK Algorithm
			// ============================
			while(victim_found==0)
			{
				uint32 WSpage_counter=0;
				victim_virtual_address=0;

				//	MODIFIED Clock
				//				for(;victim_found ==0 && WSpage_counter < PAGE_WS_MAX_SIZE ; iWS++, iWS %= PAGE_WS_MAX_SIZE, WSpage_counter++)
				//				{
				//					victim_virtual_address = curenv->pageWorkingSet[iWS].virtual_address;
				//
				//					if(pt_is_page_used(curenv->env_pgdir, victim_virtual_address)==0
				//							&& pt_is_page_modified(curenv->env_pgdir, victim_virtual_address)==0) //if not used and not modified
				//					{
				//						//VICTIM !!
				//						victim_found = 1;
				//						break;
				//					}
				//				}
				//
				//				if(victim_found)
				//				{
				//					//unmap_frame(curenv->env_pgdir, (void*)victim_virtual_address);
				//					curenv->nNotModifiedPages++;
				//					break;
				//				}


				//search for a victim page using simple clock
				WSpage_counter=0;

				victim_page_permissions  = 0;
				for(;victim_found ==0 && WSpage_counter < PAGE_WS_MAX_SIZE ; iWS++, iWS %= PAGE_WS_MAX_SIZE, WSpage_counter++)
				{
					victim_virtual_address = curenv->pageWorkingSet[iWS].virtual_address;
					victim_page_permissions = pt_get_page_permissions(curenv, victim_virtual_address);

					if(victim_page_permissions & PERM_USED)
					{
						pt_set_page_permissions(curenv, victim_virtual_address, 0, PERM_USED);
					}
					else
					{
						victim_found=1;
						break;
					}
				}
			}
		}
		else if(isPageReplacmentAlgorithmFIFO())
		{
			// FIFO Algorithm
			// =============
			victim_virtual_address = curenv->pageWorkingSet[iWS].virtual_address;
			victim_page_permissions = pt_get_page_permissions(curenv, victim_virtual_address);

			victim_found=1;
		}
		else if(isPageReplacmentAlgorithmLRU())
		{
			// LRU Algorithm
			// =============
			uint32 oldest_reference_time  = 0xFFFFFFFF;
			uint32 LRU_page_index = -1 ;
			int gg ;
			for (gg = 0 ; gg < PAGE_WS_MAX_SIZE ; gg++)
			{
				if (curenv->pageWorkingSet[gg].time_stamp < oldest_reference_time )
				{
					oldest_reference_time = curenv->pageWorkingSet[gg].time_stamp ;
					LRU_page_index = gg;
				}
			}

			victim_found = 1 ;
			iWS = LRU_page_index ;
			victim_virtual_address = curenv->pageWorkingSet[iWS].virtual_address ;
			victim_page_permissions = pt_get_page_permissions(curenv, victim_virtual_address);
			//END of LRU
		}

		if(victim_found)
		{
			//  write the page to page file if changed  and remove it from WS
			//if(pt_is_page_modified(ptr_page_table, virtual_address))
			if (victim_page_permissions & PERM_MODIFIED)
			{
				victim_modified = 1;
				curenv->nModifiedPages++;
			}
			else
			{
				victim_modified = 0;
				curenv->nNotModifiedPages++;
			}

			//int success = pf_update_env_page(curenv, (void*)victim_virtual_address);
			//if(success == 0) LOG_STRING("Modified page updated in page file successfully");
			//unmap_frame(curenv->env_pgdir, (void*)victim_virtual_address);
		}

		//cprintf("victim address = %x", victim_virtual_address);
		//cprintf(", used bit = %d, ,mod bit = %d\n", pt_is_page_used(curenv->env_pgdir, victim_virtual_address)
		//		, pt_is_page_modified(curenv->env_pgdir, victim_virtual_address));


		uint32 * ptr_victim_pagetable = NULL;
		{
			// ****************************  BUFFERING CODE *****************************//
			//	prepare frame_info accordingly
			struct Frame_Info* ptr_victim_frame = get_frame_info(curenv->env_pgdir, (void*) victim_virtual_address
					, &ptr_victim_pagetable);
			ptr_victim_frame->isBuffered = 1;
			ptr_victim_frame->va = victim_virtual_address;
			ptr_victim_frame->environment = curenv;

			//add its frame to free_frame_list at tail
			//if victim modified
			if (victim_modified == 1)
			{
				bufferList_add_page(&modified_frame_list, ptr_victim_frame);

				if (isModifiedBufferEnabled())
				{

					//check the pages in modified list, if they exceed the threshold,
					// they should be written to page file, and moved to unmodified list
					//if (modified_list_count >= MAX_MODIFIED_LIST_COUNT)
					if (LIST_SIZE(&modified_frame_list) == MAX_MODIFIED_LIST_COUNT)
					{
						//						struct freeFramesCounters counters = calculate_available_frames() ;
						//						cprintf("\nFree frames before clearing = %d\n", counters.freeBuffered + counters.freeNotBuffered);
						//						cprintf("free_first = %p, free_last = %p\n", LIST_FIRST(&free_frame_list), LIST_LAST(&free_frame_list));
						//						cprintf("mod_first = %p, mod_last = %p\n", LIST_FIRST(&modified_frame_list), LIST_LAST(&modified_frame_list));
						//						detect_modified_loop();

						//modified_list_count = 0;
						struct Frame_Info* ptr_fi = NULL;
						LIST_FOREACH(ptr_fi, &modified_frame_list)
						{

							//if(ptr_fi->environment == curenv)
							{
								pf_update_env_page(ptr_fi->environment, (void*)(ptr_fi->va), ptr_fi);
								pt_set_page_permissions(ptr_fi->environment, (uint32)(ptr_fi->va), 0, PERM_MODIFIED);

								bufferlist_remove_page(&modified_frame_list, ptr_fi) ;
								bufferList_add_page(&free_frame_list, ptr_fi) ;
								//LIST_INSERT_HEAD(&free_frame_list, ptr_fi);
								//								modified_list_count-- ;
							}
						}

						//cprintf("Concatination ... ffl # = %d\n", cnt);
						//LIST_CONCAT(&free_frame_list, &modified_frame_list);
						//cprintf("done Concatination ... ffl # = %d\n", cnt) ;

						//						detect_modified_loop();
						//
						//						counters = calculate_available_frames() ;
						//						cprintf("\nFree frames after clearing = %d\n", counters.freeBuffered + counters.freeNotBuffered);
						//
						//						cprintf("free_first = %p, free_last = %p\n", LIST_FIRST(&free_frame_list), LIST_LAST(&free_frame_list));
						//						cprintf("mod_first = %p, mod_last = %p\n", LIST_FIRST(&modified_frame_list), LIST_LAST(&modified_frame_list));
						//						cprintf("Done flushing modi list\n");
					}
				}
				//cprintf("adding to modified list\n");
				//					struct freeFramesCounters ffc = calculate_available_frames();
				//					cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d , prev=%x, next=%x, isBuffered=%d, ptr_vic=%x\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered, ptr_victim_frame->prev_next_info.le_prev, ptr_victim_frame->prev_next_info.le_next, ptr_victim_frame->isBuffered, ptr_victim_frame);

				else
				{
					//FREE IMMEDIATELY
					//=================
					struct Frame_Info* ptr_fi = NULL;
					LIST_FOREACH(ptr_fi, &modified_frame_list)
					{
						if(ptr_fi->environment == curenv)
						{
							pf_update_env_page(ptr_fi->environment, (void*)(ptr_fi->va), ptr_fi);
							pt_set_page_permissions(ptr_fi->environment, (uint32)(ptr_fi->va), 0, PERM_MODIFIED);

							bufferlist_remove_page(&modified_frame_list, ptr_fi) ;
							bufferList_add_page(&free_frame_list, ptr_fi) ;

							//								modified_list_count-- ;

						}
					}


				}


				//					struct freeFramesCounters ffc2 = calculate_available_frames();
				//					cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d, prev=%x, next=%x, isBuffered=%d, ptr_vic=%x\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered, ptr_victim_frame->prev_next_info.le_prev, ptr_victim_frame->prev_next_info.le_next, ptr_victim_frame->isBuffered, ptr_victim_frame);

				//					modified_list_count++;

			}
			else
			{
				bufferList_add_page(&free_frame_list, ptr_victim_frame);
			}

			//set buffered bit in page table to 1, present = 0
			pt_set_page_permissions(curenv, victim_virtual_address, PERM_BUFFERED, PERM_PRESENT);
			// ****************************  BUFFERING CODE *****************************//
		}
	}

	// ****************************  BUFFERING CODE *****************************//
	uint32 * ptr_faulted_va_pagetable = NULL;
	struct Frame_Info* ptr_faulted_va_frame = get_frame_info(curenv->env_pgdir, (void*) fault_va
			, &ptr_faulted_va_pagetable);

	uint32 faulted_page_permissions = pt_get_page_permissions(curenv, fault_va);

	// if faulted page is buffered
	if(faulted_page_permissions & PERM_BUFFERED)
	{
		pt_set_page_permissions(curenv, fault_va, PERM_PRESENT, PERM_BUFFERED);
		ptr_faulted_va_frame->isBuffered = 0 ;
		if(faulted_page_permissions & PERM_MODIFIED)
		{
			//cprintf("remove from modified buffer list!\n");
			bufferlist_remove_page(&modified_frame_list, ptr_faulted_va_frame);
			//				modified_list_count--;
		}
		else
		{
			//cprintf("remove from free buffer list!\n");
			bufferlist_remove_page(&free_frame_list, ptr_faulted_va_frame);
		}
	}// ****************************  BUFFERING CODE *****************************//
	else
	{
		/// read the new page from page file to memory
		struct Frame_Info *p = NULL;
		int r;
		if ((r = allocate_frame(&p)) < 0)
		{
			return;//E_NO_MEM;
		}

		LOG_STATMENT(cprintf("Allocated frame for the faulted page\n"));
		int success = 0;

		success = map_frame(curenv->env_pgdir, p, (void*) fault_va, PERM_USER | PERM_WRITEABLE);
		if (success == 0)
			LOG_STATMENT(cprintf("Mapped frame for the faulted page\n"));
		tlbflush(); /************************************************* FOR map_frame */

		//TODODONE: why roundown here, not inside pf_read_env_page ??
		//success = pf_read_env_page(curenv, (void*) ROUNDDOWN(fault_va,PAGE_SIZE));
		success = pf_read_env_page(curenv, (void*) fault_va);
		if (success == 0)
		{
			LOG_STATMENT(cprintf("Page read from disk successfully\n"));
		}
		else if (success == E_PAGE_NOT_EXIST_IN_PF)
		{
			//Check if it's a stack page
			if (fault_va >= USER_HEAP_MAX && fault_va < USTACKTOP)
			{
				//cprintf("new stack page!\n");
				success = pf_add_empty_env_page(curenv, fault_va, 1);
				if (success == 0)
					LOG_STATMENT(cprintf("Page added to page file successfully\n"));
			}
			else
			{
				cprintf("ILLEGAL MEMORY ACCESS panic at %x\n", fault_va);
				print_trapframe(&(curenv->env_tf));
				panic("ILLEGAL MEMORY ACCESS!!!");
			}

		}

	}

	/// update the working set and break the loop
	env_page_ws_set_entry(curenv, iWS, fault_va);
	LOG_STRING("updating the working set");
	victim_found = 1;
	curenv->page_last_WS_index = iWS + 1;
	curenv->page_last_WS_index %= PAGE_WS_MAX_SIZE;

	//		int cc=0; int ccc=0;
	//			for(;cc<15000; cc++)
	//			{
	//				ccc++;
	//			}
	//
	//		cprintf("timenow at PF handling= %d\n", time);
	//				cprintf("---------------------------------------------------\n");
	//				env_page_ws_print(curenv);
	//				cprintf("-=====================================================\n");
	//		cprintf("[AFTER] Page Fault: free = %d, mod = %d\n", sys_calculate_free_frames(), sys_calculate_modified_frames()) ;


}
