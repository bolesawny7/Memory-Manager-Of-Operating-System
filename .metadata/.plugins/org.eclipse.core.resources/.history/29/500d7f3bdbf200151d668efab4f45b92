/*	Simple command-line kernel prompt useful for
	controlling the kernel and exploring the system interactively.


KEY WORDS
==========
CONSTANTS:	WHITESPACE, NUM_OF_COMMANDS
VARIABLES:	Command, commands, name, description, function_to_execute, number_of_arguments, arguments, command_string, command_line, command_found
FUNCTIONS:	readline, cprintf, execute_command, run_command_prompt, command_kernel_info, command_help, strcmp, strsplit, start_of_kernel, start_of_uninitialized_data_section, end_of_kernel_code_section, end_of_kernel
=====================================================================================================================================================================================================
 */

#include <inc/stdio.h>
#include <inc/string.h>
#include <inc/memlayout.h>
#include <inc/assert.h>
#include <inc/x86.h>


#include <kern/console.h>
#include <kern/command_prompt.h>
#include <kern/memory_manager.h>
#include <kern/trap.h>
#include <kern/kdebug.h>
#include <kern/user_environment.h>


/// LAB3.Hands-on.Solution: My int array start address variable
unsigned int intArrAddress = 0xf1000000;
//=============================================================

//Structure for each command
struct Command 
{
	char *name;
	char *description;
	// return -1 to force command prompt to exit
	int (*function_to_execute)(int number_of_arguments, char** arguments);
};

//Functions Declaration
int execute_command(char *command_string);
int command_writemem(int number_of_arguments, char **arguments);
int command_readmem(int number_of_arguments, char **arguments);
int command_meminfo(int , char **);

//Lab2.Hands.On 
//=============
int command_readblock(int number_of_arguments, char **arguments);
int command_createIntArray(int number_of_arguments, char **arguments);

//Lab4.Hands.On 
//=============
int command_show_mapping(int number_of_arguments, char **arguments);
int command_set_permission(int number_of_arguments, char **arguments);
int command_share_range(int number_of_arguments, char **arguments);

//Lab5.Examples 
//=============
int command_nr(int number_of_arguments, char **arguments);
int command_ap(int , char **);
int command_fp(int , char **);

//Lab5.Hands-on
//=============
int command_asp(int, char **);
int command_cfp(int, char **);

//Lab6.Examples 
//=============
int command_run(int , char **);
int command_kill(int , char **);
int command_ft(int , char **);


//Array of commands. (initialized)
struct Command commands[] = 
{
		{ "help", "Display this list of commands", command_help },
		{ "kernel_info", "Display information about the kernel", command_kernel_info },
		{ "wum", "writes one byte to specific location" ,command_writemem},
		{ "rum", "reads one byte from specific location" ,command_readmem},
		{ "readblock", "reads block of bytes from specific location in given user program" ,command_readblock},
		{ "cia", "Create integer array with the given size and initialize it", command_createIntArray},
		{ "meminfo", "show information about the physical memory" ,command_meminfo},

		//LAB4: Hands-on
		{ "sm", "Lab4.HandsOnSolution", command_show_mapping},
		{ "sp", "Lab4.HandsOnSolution", command_set_permission},
		{ "sr", "Lab4.HandsOnSolution", command_share_range},

		//LAB5: Examples
		{ "nr", "show the number of references of the physical frame" ,command_nr},
		{ "ap", "allocate one page [if not exists] in the user space at the given virtual address", command_ap},
		{ "fp", "free one page in the user space at the given virtual address", command_fp},

		//LAB5: Hands-on
		{ "asp", "with the given virtual addresses" ,command_asp},
		{ "cfp", "count the number of free pages in the given range", command_cfp},
		
		//LAB6: Examples
		{ "ft", "Lab6.HandsOn: Free table", command_ft},
		{ "run", "Lab6.HandsOn: Load and Run User Program", command_run},
		{ "kill", "Lab6.HandsOn: Kill User Program", command_kill},

};

//Number of commands = size of the array / size of command structure
#define NUM_OF_COMMANDS (sizeof(commands)/sizeof(commands[0]))

unsigned read_eip();


//invoke the command prompt
void run_command_prompt()
{
	char command_line[1024];

	while (1==1) 
	{
		//get command line
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
	}
}

/***** Kernel command prompt command interpreter *****/

//define the white-space symbols 
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it 
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
	// Split the command string into whitespace-separated arguments
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
	if (number_of_arguments == 0)
		return 0;

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
		{
			command_found = 1;
			break;
		}
	}

	if(command_found)
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);			
		return return_value;
	}
	else
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
		return 0;
	}
}

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	return 0;
}

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
}


int command_readmem(int number_of_arguments, char **arguments)
{
	unsigned int address = strtol(arguments[1], NULL, 16); 
	unsigned char *ptr = (unsigned char *)(address ) ;

	cprintf("value at address %x = %c\n", ptr, *ptr);

	return 0;
}
int command_writemem(int number_of_arguments, char **arguments)
{
	unsigned int address = strtol(arguments[1], NULL, 16); 
	unsigned char *ptr = (unsigned char *)(address) ;

	*ptr = arguments[2][0];

	return 0;
}


int command_meminfo(int number_of_arguments, char **arguments)
{
	cprintf("Free frames = %d\n", calculate_free_frames());
	return 0;
}


//Lab2.Hands.On Solution
//======================
int command_readblock(int number_of_arguments, char **arguments)
{
	unsigned int phys_address = strtol(arguments[1], NULL, 16);

	unsigned int virtual_address= phys_address + KERNEL_BASE;

	char* ptrToChar = (char*) virtual_address;

	int nBytes = strtol(arguments[2], NULL, 10);

	int i=0;
	for(i=0; i<nBytes; i++)
	{
		cprintf("%c \n", *ptrToChar);
		ptrToChar++;
	}

	return 0;
}
int command_createIntArray(int number_of_arguments, char **arguments)
{
	int nElements= strtol(arguments[1], NULL, 10);
	int* ptrToInt = (int*)intArrAddress;

	int i=0;
	for(i=0; i< nElements; i++)
	{
		char stringElementValue[20];
		cprintf("Enter Element %d: ",i);
		readline("", stringElementValue);

		*ptrToInt = strtol(stringElementValue, NULL, 10);

		ptrToInt++; //note that as this pointer increment, the compiler knows the size of the integer, and it increments the address inside the pointer by 4 bytes automatically
	}

	// don't forget to update the virtual address for
	// any new array that user may create
	intArrAddress = (unsigned int)ptrToInt;

	return 0;
}

//===========================================================================

//Lab4.Hands.On Solution
//======================
int command_show_mapping(int number_of_arguments, char **arguments)
{
	uint32 *va = (uint32 *)strtol(arguments[1], NULL, 16) ;
	uint32 *ptr_page_table = NULL;
	get_page_table(ptr_page_directory, va, 0, &ptr_page_table) ;
	if (ptr_page_table != NULL)
	{
		int dir_index = PDX(va);
		int table_index = PTX(va);
		uint32 fnTable = ptr_page_directory[dir_index] >> 12;
		uint32 paTable = fnTable * PAGE_SIZE;
		uint32 fnPage = ptr_page_table[table_index] >> 12;
		uint32 paPage = fnPage * PAGE_SIZE;
		int used = ptr_page_table[table_index] & PERM_USED;

		cprintf("DIR Index = %d\nTable Index = %d\nPhysical Address of Page Table = %08x\nPhysical Address of Page Itself = %08x\n", dir_index, table_index, paTable, paPage) ;
		if (used == 0)
			cprintf("NOT Used\n");
		else
			cprintf("Used\n");

	}
	return 0 ;
}
int command_set_permission(int number_of_arguments, char **arguments)
{
	uint32 *va = (uint32 *)strtol(arguments[1], NULL, 16) ;
	uint32 *ptr_page_table = NULL;
	get_page_table(ptr_page_directory, va, 0, &ptr_page_table) ;
	if (ptr_page_table != NULL)
	{
		char perm = arguments[2][0];
		int table_index = PTX(va) ;

		if (perm == 'r')
		{
			ptr_page_table[table_index] &= (~PERM_WRITEABLE);
		}
		else if (perm == 'w')
		{
			ptr_page_table[table_index] |= (PERM_WRITEABLE);
		}
		//tlb_invalidate(ptr_page_directory, va); // delete the cache of the given address
		tlbflush() ; // delete the whole cache
	}
	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
	char *va1 = (char *)strtol(arguments[1], NULL, 16) ;
	char *va2 = (char *)strtol(arguments[2], NULL, 16) ;
	uint32 size = strtol(arguments[3], NULL, 10) ;
	size *= 1024 ; //convert it to bytes
	size = ROUNDUP(size, PAGE_SIZE); //round it to the nearest page

	int i = 0;
	for (i = 0 ; i < size ; i += PAGE_SIZE)
	{
		uint32 *ptr_page_table1 = NULL;
		get_page_table(ptr_page_directory, va1, 0, &ptr_page_table1) ;
		if (ptr_page_table1 != NULL)
		{
			uint32 *ptr_page_table2 = NULL;
			get_page_table(ptr_page_directory, va2, 1, &ptr_page_table2) ;
			ptr_page_table2[PTX(va2)] = ptr_page_table1[PTX(va1)];
		}
		va1 += PAGE_SIZE;
		va2 += PAGE_SIZE;
	}
	return 0;
}
//===========================================================================

//Lab5.Examples
//==============
//[1] Number of references on the given physical address
int command_nr(int number_of_arguments, char **arguments)
{
	uint32 pa = strtol(arguments[1], NULL, 16);

	//[1]  Get the frame info of the given pa
	struct Frame_Info * ptr_frame_info ;
	ptr_frame_info = to_frame_info(pa);

	// [2] Display number of references
	cprintf("num of refs at pa %x = %d\n", pa, ptr_frame_info->references);
	return 0;
}

//[2] Allocate Page: If the given user virtual address is mapped, do nothing. Else, allocate a single frame and map it to a given virtual address in the user space
int command_ap(int number_of_arguments, char **arguments)
{
	//If already mapped, do nothing
	//Else, allocate & map

	uint32 va = strtol(arguments[1], NULL, 16);

	//[1] Check if exists?
	uint32 *ptr_table;
	struct Frame_Info *ptr_frame_info ;
	ptr_frame_info = get_frame_info(ptr_page_directory, (void*)va, &ptr_table);
	if (ptr_frame_info != NULL)
	{
		cprintf("Page already exists!\n");
		return 0;
	}

	//[2] If not exists, allocate
	int r = allocate_frame(&ptr_frame_info);
	if (r == E_NO_MEM)
	{
		cprintf("No enough memory for the page itself\n");
		return -1;
	}

	//[3] map
	r = map_frame(ptr_page_directory, ptr_frame_info, (void*)va, PERM_WRITEABLE | PERM_USER) ;
	if (r == E_NO_MEM)
	{
		cprintf("No enough memory for the page table\n");

		//free the previously allocated frame
		free_frame(ptr_frame_info);
		return -1;
	}

	return 0 ;
}

//[3] Free Page: Un-map a single page at the given virtual address in the user space
int command_fp(int number_of_arguments, char **arguments)
{
	uint32 va = strtol(arguments[1], NULL, 16);

	// Un-map the page at this address
	unmap_frame(ptr_page_directory, (void*) va);

	return 0;
}


//Lab5.Hands-on
//==============
//[1] Allocate Shared Pages
int command_asp(int number_of_arguments, char **arguments)
{
	uint32 va1 = strtol(arguments[1], NULL, 16);
	uint32 va2 = strtol(arguments[2], NULL, 16);

	//[1] Allocate one frame
	struct Frame_Info* ptr_frame_info ;
	int r = allocate_frame(&ptr_frame_info);
	if (r == E_NO_MEM)
	{
		cprintf("No enough memory to allocate frame!\n");
		return -1;
	}

	//[2] Map the "va1" to the allocated frame
	r = map_frame(ptr_page_directory, ptr_frame_info, (void*)va1, PERM_USER | PERM_WRITEABLE);

	if (r == E_NO_MEM)
	{
		cprintf("No enough memory for the page table!\n");
		//free the previously allocated frame
		free_frame(ptr_frame_info);
		return -1;
	}

	//[2] Map the "va2" to the allocated frame
	r = map_frame(ptr_page_directory, ptr_frame_info, (void*)va2, PERM_USER | PERM_WRITEABLE);

	if (r == E_NO_MEM)
	{
		cprintf("No enough memory for the page table!\n");
		//free the previously mapped page
		unmap_frame(ptr_page_directory, (void*)va1);
		return -1;
	}
	return 0;
}


//[2] Count Free Pages in Range
int command_cfp(int number_of_arguments, char **arguments)
{
	uint32 va1 = strtol(arguments[1], NULL, 16);
	uint32 va2 = strtol(arguments[2], NULL, 16);

	//[1] Adjust start of the loop at a multiple of 4 KB (i.e. page boundary)
	va1 = ROUNDDOWN(va1, PAGE_SIZE);

	//[2] For each page in the range, check its existence!
	uint32* ptr_table ;
	struct Frame_Info* ptr_frame_info ;
	uint32 v ;
	int cnt = 0 ;
	for (v = va1; v < va2; v += PAGE_SIZE)
	{
		ptr_frame_info = get_frame_info(ptr_page_directory, (void*)v, &ptr_table);
		if (ptr_frame_info == NULL)
		{
			cnt++ ;
		}
	}
	cprintf("Number of free pages in [%x, %x) = %d\n", va1, va2, cnt);
	return 0;
}


//===========================================================================

//Lab6.Examples
//=============

int command_run(int number_of_arguments, char **arguments)
{
	//[1] Create and initialize a new environment for the program to be run
	struct UserProgramInfo* ptr_program_info = env_create(arguments[1]);
	if(ptr_program_info == 0) return 0;

	//[2] Run the created environment using "env_run" function
	env_run(ptr_program_info->environment);
	return 0;
}


int command_kill(int number_of_arguments, char **arguments)
{
	//[1] Get the user program info of the program (by searching in the "userPrograms" array
	struct UserProgramInfo* ptr_program_info = get_user_program_info(arguments[1]) ;
	if(ptr_program_info == 0) return 0;

	//[2] Kill its environment using "env_free" function
	env_free(ptr_program_info->environment);
	ptr_program_info->environment = NULL;
	return 0;
}

int command_ft(int number_of_arguments, char **arguments)
{
	uint32 va = strtol(arguments[1], NULL, 16) ;

	//Remove the page table itself
	uint32 *ptr_table = NULL ;
	get_page_table(ptr_page_directory, (void*)va, 0, &ptr_table) ;
	if (ptr_table!=NULL)
	{
		uint32 pa = K_PHYSICAL_ADDRESS(ptr_table) ;
		struct Frame_Info *ptr = to_frame_info(pa) ;
		ptr->references = 0 ;
		free_frame(ptr) ;
		ptr_page_directory[PDX(va)] = 0 ;

		//Refresh the whole cache memory
		tlbflush();
	}
	return 0;
}
