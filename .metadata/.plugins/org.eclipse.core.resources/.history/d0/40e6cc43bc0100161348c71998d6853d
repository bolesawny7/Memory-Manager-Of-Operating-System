
#include <inc/lib.h>
/*
 * Simple malloc()
 *
 * The address space for the dynamic allocation is
 * from "USER_HEAP_START" to "USER_HEAP_MAX"-1
 * Pages are allocated ON 4KB BOUNDARY
 * On succeed, return void pointer to the allocated space
 * return NULL if
 *	-there's no suitable space for the required allocation
 */

// malloc()
//	This function use both FIRST FIT and BEST FIT strategies to allocate space in heap
//  with the given size and return void pointer to the start of the allocated space

//	To do this, we need to switch to the kernel, allocate the required space
//	in PAGE FILE then switch back to the user again.
//
//	We can use sys_allocateMem(uint32 virtual_address, uint32 size); which
//		switches to the kernel mode, calls allocateMem(struct Env* e, uint32 virtual_address, uint32 size) in
//		"memory_manager.c", then switch back to the user mode here
//	the allocateMem function is empty, make sure to implement it.


#define NUM_OF_HEAP_PAGES (USER_HEAP_MAX-USER_HEAP_START)/PAGE_SIZE
uint8 all_heap_pages[NUM_OF_HEAP_PAGES];
int nAllocations;
uint32 heap_allocations_addresses[NUM_OF_HEAP_PAGES];
uint32 heap_allocations_sizes[NUM_OF_HEAP_PAGES];


void* malloc(uint32 size)
{
	//TODO: [PROJECT 2015 - DynamicAlloc] malloc() [User Side]
	// your code is here, remove the panic and write your code
	//panic("malloc() is not implemented yet...!!");

	// Steps:
	//	1) Implement both FIRST FIT and BEST FIT strategies to search the heap for suitable space
	//		to the required allocation size (space should be on 4 KB BOUNDARY)
	//	2) if no suitable space found, return NULL
	//	 Else,
	//	3) Call sys_allocateMem to invoke the Kernel for allocation
	// 	4) Return pointer containing the virtual address of allocated space,
	//

	//This function should find the space of the required range
	// ******** ON 4KB BOUNDARY ******************* //

	//Use sys_isHeapPlacementStrategyFIRSTFIT() and	sys_isHeapPlacementStrategyBESTFIT()
	//to check the current strategy


	//TODO: [PROJECT 2015 - BONUS1] Apply NEXT FIT and WORST FIT policies

	uint32 rounded_size = ROUNDUP(size, PAGE_SIZE);
	uint32 required_pages = rounded_size / PAGE_SIZE;
	uint32 selected_allocation_start_va = 0;
	int allocation_available = 0;

	{
		uint32 start_va = USER_HEAP_START;
		uint32 allocation_start_va = 0;
		uint32 pages_found = 0;

		uint32 minFit = 0x7FFFFFFE;
		uint32 min_allocation_start_va = 0;

		if (sys_isUHeapPlacementStrategyFIRSTFIT())
		{
			for (; start_va < USER_HEAP_MAX; start_va += PAGE_SIZE)
			{

				if (all_heap_pages[(start_va - USER_HEAP_START) / PAGE_SIZE] == 0)
				{

					//check for appropriate size
					++pages_found;
					if (allocation_start_va == 0)
					{
						allocation_start_va = start_va;
					}

					if (pages_found == required_pages)
					{
						allocation_available = 1;
						break;
					}

				} else
				{
					//page is not free
					pages_found = 0;
					allocation_start_va = 0;
				}
			}
		} else if (sys_isHeapPlacementStrategyBESTFIT())
		{
			for (; start_va < USER_HEAP_MAX; start_va += PAGE_SIZE)
			{
				if (all_heap_pages[(start_va - USER_HEAP_START) / PAGE_SIZE] == 1)
				{
					if (start_va > USER_HEAP_START)
					{
						//if the previous was free
						if (all_heap_pages[((start_va - PAGE_SIZE) - USER_HEAP_START) / PAGE_SIZE] == 0)
						{
							//then a free area is complete, so check
							if (pages_found < minFit && pages_found >= required_pages)
							{
								minFit = pages_found;
								min_allocation_start_va = allocation_start_va;
								allocation_available = 1;
							}
						}
					}
					pages_found = 0;
					allocation_start_va = 0;

				} else if (all_heap_pages[(start_va - USER_HEAP_START) / PAGE_SIZE] == 0)
				{
					++pages_found;
					if (allocation_start_va == 0)
					{
						allocation_start_va = start_va;
					}
				}
			}
		}

		if (sys_isUHeapPlacementStrategyFIRSTFIT())
		{
			selected_allocation_start_va = allocation_start_va;
		} else if (sys_isHeapPlacementStrategyBESTFIT())
		{
			//check for the last incomplete free area check at the end of heap area
			if (pages_found > 0)
			{
				if (pages_found < minFit && pages_found >= required_pages)
				{
					minFit = pages_found;
					min_allocation_start_va = allocation_start_va;
					allocation_available = 1;
				}
			}

			selected_allocation_start_va = min_allocation_start_va;
		}

	}

	if(allocation_available == 1)
	{
		sys_allocateMem(selected_allocation_start_va, rounded_size);
		uint32 va2 = selected_allocation_start_va;
		for( ; va2 < (selected_allocation_start_va + rounded_size) ; va2+=PAGE_SIZE)
		{
			all_heap_pages[(va2 - USER_HEAP_START) / PAGE_SIZE] = 1;
		}
		//if(returnAddress != NULL) va_user_free_mem = ((uint32)returnAddress + size);
		++nAllocations;
		heap_allocations_addresses[nAllocations-1] = selected_allocation_start_va;
		heap_allocations_sizes[nAllocations-1] = rounded_size;

		return (void*)selected_allocation_start_va;
	}
	else
	{
		return NULL;
	}


	//return 0;
}



// free():
//	This function frees the allocation of the given virtual_address
//	To do this, we need to switch to the kernel, free the pages AND "EMPTY" PAGE TABLES
//	from page file and main memory then switch back to the user again.
//
//	We can use sys_freeMem(uint32 virtual_address, uint32 size); which
//		switches to the kernel mode, calls freeMem(struct Env* e, uint32 virtual_address, uint32 size) in
//		"memory_manager.c", then switch back to the user mode here
//	the freeMem function is empty, make sure to implement it.

void free(void* virtual_address)
{
	//TODO: [PROJECT 2015 - DynamicDeAlloc] free() [User Side]
	// your code is here, remove the panic and write your code
	//panic("free() is not implemented yet...!!");

	//get the size of the given allocation using its address
	//you need to call sys_freeMem()

	int a = 0;
	for(; a<nAllocations; ++a) {
		if(heap_allocations_addresses[a]== (uint32)virtual_address) {
			break;
		}
	}
	if(a < nAllocations)
	{
		uint32 size = heap_allocations_sizes[a];
		sys_freeMem((uint32)virtual_address, size);

		uint32 va2 = (uint32)virtual_address;
		for( ; va2 < ((uint32)virtual_address + size) ; va2+=PAGE_SIZE)
		{
			all_heap_pages[(va2 - USER_HEAP_START) / PAGE_SIZE] = 0;
		}

		heap_allocations_addresses[a] = 0;
		heap_allocations_sizes[a] = 0;
	}
	else
	{
		///error
	}
}


//=================================================================================//
//============================== BONUS FUNCTION ===================================//
//=================================================================================//
// realloc():

//	Attempts to resize the allocated space at "virtual_address" to "new_size" bytes,
//	possibly moving it in the heap.
//	If successful, returns the new virtual_address, in which case the old virtual_address must no longer be accessed.
//	On failure, returns a null pointer, and the old virtual_address remains valid.

//	A call with virtual_address = null is equivalent to malloc().
//	A call with new_size = zero is equivalent to free().

//  Hint: you may need to use the sys_moveMem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
//		which switches to the kernel mode, calls moveMem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
//		in "memory_manager.c", then switch back to the user mode here
//	the moveMem function is empty, make sure to implement it.

void *realloc(void *virtual_address, uint32 new_size)
{
	//TODO: [PROJECT 2015 - BONUS3] realloc() [User Side]
	// your code is here, remove the panic and write your code
	panic("realloc() is not implemented yet...!!");

}

