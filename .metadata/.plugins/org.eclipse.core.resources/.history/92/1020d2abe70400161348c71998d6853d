/*	Simple command-line kernel prompt useful for
	controlling the kernel and exploring the system interactively.


KEY WORDS
==========
CONSTANTS:	WHITESPACE, NUM_OF_COMMANDS
VARIABLES:	Command, commands, name, description, function_to_execute, number_of_arguments, arguments, command_string, command_line, command_found
FUNCTIONS:	readline, cprintf, execute_command, run_command_prompt, command_kernel_info, command_help, strcmp, strsplit, start_of_kernel, start_of_uninitialized_data_section, end_of_kernel_code_section, end_of_kernel
=====================================================================================================================================================================================================
 */

#include <inc/stdio.h>
#include <inc/string.h>
#include <inc/memlayout.h>
#include <inc/assert.h>
#include <inc/x86.h>


#include <kern/console.h>
#include <kern/command_prompt.h>
#include <kern/memory_manager.h>
#include <kern/trap.h>
#include <kern/kdebug.h>
#include <kern/user_environment.h>
#include <kern/tests.h>

//Structure for each command
struct Command 

//Functions Declaration
int execute_command(char *command_string);
int command_writemem(int number_of_arguments, char **arguments);
int command_readmem(int number_of_arguments, char **arguments);
int command_readblock(int number_of_arguments, char **arguments);

//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments);
int command_set_permission(int number_of_arguments, char **arguments);
int command_share_range(int number_of_arguments, char **arguments);


//Array of commands. (initialized)
struct Command commands[] = 
{
		{ "help", "Display this list of commands", command_help },
		{ "kernel_info", "Display information about the kernel", command_kernel_info },
		{ "writemem", "writes one byte to specific location in given user program" ,command_writemem},
		{ "readmem", "reads one byte from specific location in given user program" ,command_readmem},
		{ "readblock", "reads block of bytes from specific location in given user program" ,command_readblock},
		{ "alloc_page", "allocate single page at the given user virtual address" ,command_allocpage},
		{ "rum", "read single byte at the given user virtual address" ,command_readusermem},
		{ "wum", "write single byte at the given user virtual address" ,command_writeusermem},
		{ "meminfo", "show information about the physical memory" ,command_meminfo},

		//Lab4.Hands.On
		//=============
		{ "sm", "Lab4.HandsOn", command_show_mapping},
		{ "sp", "Lab4.HandsOn", command_set_permission},
		{ "sr", "Lab4.HandsOn", command_share_range},

		//Assignment3 commands
		//====================
		{ "cvp", "connect va with pa using the given rw permission",command_cvp},
		{ "fv", "find va of the given  physical one", command_fv},
		{ "cum", "Count number of pages that are BOTH Used and Modified inside a table", command_cum},
		{ "sm2nu", "set all modified pages inside the given virtual range to be NOT Used", command_sm2nu},
		
		//Assignment3.BONUS command
		//=========================
		{ "cp", "copy entire conten of one page to another",command_cp},
		
};

//Number of commands = size of the array / size of command structure
#define NUM_OF_COMMANDS (sizeof(commands)/sizeof(commands[0]))

unsigned read_eip();


//invoke the command prompt
void run_command_prompt()
{
	//CAUTION: DON'T CHANGE THIS LINE======
	TestAssignment3();
	//=====================================

	char command_line[1024];

	while (1==1) 
	{
		//get command line
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
	}
}

/***** Kernel command prompt command interpreter *****/

//define the white-space symbols 
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it 
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
	// Split the command string into whitespace-separated arguments
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
	if (number_of_arguments == 0)
		return 0;

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
		{
			command_found = 1;
			break;
		}
	}

	if(command_found)
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);			
		return return_value;
	}
	else
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
		return 0;
	}
}

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	return 0;
}

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
}

int command_writemem(int number_of_arguments, char **arguments)
{
	char* user_program_name = arguments[1];		
	int address = strtol(arguments[3], NULL, 16);

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
	if(ptr_user_program_info == NULL) return 0;	

	uint32 oldDir = rcr3();
	lcr3((uint32) K_PHYSICAL_ADDRESS( ptr_user_program_info->environment->env_pgdir));

	unsigned char *ptr = (unsigned char *)(address) ; 

	//Write the given Character
	*ptr = arguments[2][0];
	lcr3(oldDir);	

	return 0;
}

int command_readmem(int number_of_arguments, char **arguments)
{
	char* user_program_name = arguments[1];		
	int address = strtol(arguments[2], NULL, 16);

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
	if(ptr_user_program_info == NULL) return 0;	

	uint32 oldDir = rcr3();
	lcr3((uint32) K_PHYSICAL_ADDRESS( ptr_user_program_info->environment->env_pgdir));

	unsigned char *ptr = (unsigned char *)(address) ;

	//Write the given Character
	cprintf("value at address %x = %c\n", address, *ptr);

	lcr3(oldDir);	
	return 0;
}

int command_readblock(int number_of_arguments, char **arguments)
{
	char* user_program_name = arguments[1];	
	int address = strtol(arguments[2], NULL, 16);
	int nBytes = strtol(arguments[3], NULL, 10);

	unsigned char *ptr = (unsigned char *)(address) ;
	//Write the given Character	

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
	if(ptr_user_program_info == NULL) return 0;	

	uint32 oldDir = rcr3();
	lcr3((uint32) K_PHYSICAL_ADDRESS( ptr_user_program_info->environment->env_pgdir));

	int i;	
	for(i = 0;i<nBytes; i++)
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
}

int command_allocpage(int number_of_arguments, char **arguments)
{
	unsigned int address = strtol(arguments[1], NULL, 16); 
	unsigned char *ptr = (unsigned char *)(address) ;

	struct Frame_Info * ptr_frame_info ;
	allocate_frame(&ptr_frame_info);

	map_frame(ptr_page_directory, ptr_frame_info, ptr, PERM_WRITEABLE|PERM_USER);

	return 0;
}


int command_readusermem(int number_of_arguments, char **arguments)
{
	unsigned int address = strtol(arguments[1], NULL, 16); 
	unsigned char *ptr = (unsigned char *)(address) ;

	cprintf("value at address %x = %c\n", ptr, *ptr);

	return 0;
}
int command_writeusermem(int number_of_arguments, char **arguments)
{
	unsigned int address = strtol(arguments[1], NULL, 16); 
	unsigned char *ptr = (unsigned char *)(address) ;

	*ptr = arguments[2][0];

	return 0;
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	cprintf("Free frames = %d\n", calculate_free_frames());

	return 0;
}



//Lab4.Hands.On Solution
//======================
int command_show_mapping(int number_of_arguments, char **arguments)
{
	uint32 *va = (uint32 *)strtol(arguments[1], NULL, 16) ;
	uint32 *ptr_page_table = NULL;
	get_page_table(ptr_page_directory, va, 0, &ptr_page_table) ;
	if (ptr_page_table != NULL)
	{
		int dir_index = PDX(va);
		int table_index = PTX(va);
		uint32 fnTable = ptr_page_directory[dir_index] >> 12;
		uint32 paTable = fnTable * PAGE_SIZE;
		uint32 fnPage = ptr_page_table[table_index] >> 12;
		uint32 paPage = fnPage * PAGE_SIZE;
		int used = ptr_page_table[table_index] & PERM_USED;

		cprintf("DIR Index = %d\nTable Index = %d\nPhysical Address of Page Table = %08x\nPhysical Address of Page Itself = %08x\n", dir_index, table_index, paTable, paPage) ;
		if (used == 0)
			cprintf("NOT Used\n");
		else
			cprintf("Used\n");

	}
	return 0 ;
}

int command_set_permission(int number_of_arguments, char **arguments)
{
	uint32 *va = (uint32 *)strtol(arguments[1], NULL, 16) ;
	uint32 *ptr_page_table = NULL;
	get_page_table(ptr_page_directory, va, 0, &ptr_page_table) ;
	if (ptr_page_table != NULL)
	{
		char perm = arguments[2][0];
		int table_index = PTX(va) ;

		if (perm == 'r')
		{
			ptr_page_table[table_index] &= (~PERM_WRITEABLE);
		}
		else if (perm == 'w')
		{
			ptr_page_table[table_index] |= (PERM_WRITEABLE);
		}
		//tlb_invalidate(ptr_page_directory, va); // delete the cache of the given address
		tlbflush() ; // delete the whole cache
	}

	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
	char *va1 = (char *)strtol(arguments[1], NULL, 16) ;
	char *va2 = (char *)strtol(arguments[2], NULL, 16) ;
	uint32 size = strtol(arguments[3], NULL, 10) ;
	size *= 1024 ; //convert it to bytes
	size = ROUNDUP(size, PAGE_SIZE); //round it to the nearest page

	int i = 0;
	for (i = 0 ; i < size ; i += PAGE_SIZE)
	{
		uint32 *ptr_page_table1 = NULL;
		get_page_table(ptr_page_directory, va1, 0, &ptr_page_table1) ;
		if (ptr_page_table1 != NULL)
		{
			uint32 *ptr_page_table2 = NULL;
			get_page_table(ptr_page_directory, va2, 1, &ptr_page_table2) ;
			ptr_page_table2[PTX(va2)] = ptr_page_table1[PTX(va1)];
		}
		va1 += PAGE_SIZE;
		va2 += PAGE_SIZE;
	}
	return 0;
}


//========================================================
/*ASSIGNMENT-3*/
//========================================================
//Q1:Connect Virtual Address to Physical One	(1 MARK)

/*DON'T change this function*/
int command_cvp(int number_of_arguments, char **arguments )
{
	//DON'T WRITE YOUR LOGIC HERE, WRITE INSIDE THE WriteDistinctChars() FUNCTION
	uint32 tableEntry = ConnectVirtualToPhysical(arguments) ;
	cprintf("The table entry after connection = %08x\n", tableEntry);

	return 0;
}
/*---------------------------------------------------------*/

/*FILL this function
 * arguments[1]: virtual address of the page in HEXADECIMAL
 * arguments[2]: physical address of the frame in HEXADECIMAL
 * arguments[3]: <r/w>: 'r' for read-only permission, 'w' for read/write permission
 * Return:
 * 		page table ENTRY of the <virtual address> after applying the connection
 */
uint32 ConnectVirtualToPhysical(char** arguments)
{
	//Assignment3.Q1
	//put your logic here
	//...


	uint32 *va = (uint32 *)strtol(arguments[1], NULL, 16) ;
	uint32 pa = (uint32 )strtol(arguments[2], NULL, 16) ;
		uint32 *ptr_page_table = NULL;
		get_page_table(ptr_page_directory, va, 1, &ptr_page_table) ;
		int table_index = PTX(va) ;

	if (ptr_page_table != NULL)
	{
		 uint32  fram_num = pa/PAGE_SIZE;
		  ptr_page_table[table_index]=fram_num;

		ptr_page_table[table_index]= ptr_page_table[table_index]<<12;

		ptr_page_table[table_index] |=(PERM_PRESENT);
		ptr_page_table[table_index] &=(~PERM_MODIFIED);
		ptr_page_table[table_index] &=(~PERM_USED);
		ptr_page_table[table_index] &=(~PERM_USER);


		char perm = arguments[3][0];

				if (perm == 'r')
						{
							ptr_page_table[table_index] &= (~PERM_WRITEABLE);
						}
						else if (perm == 'w')
						{
							ptr_page_table[table_index] |= (PERM_WRITEABLE);
						}

		}

	return ptr_page_table[table_index];
}

//========================================================
//Q2: Find Virtual Address of the Given Physical One	(1 MARK)

/*DON'T change this function*/
int command_fv(int number_of_arguments, char **arguments )
{
	//DON'T WRITE YOUR LOGIC HERE, WRITE INSIDE THE WriteDistinctChars() FUNCTION
	uint32 ret = FindVirtualOfPhysical(arguments) ;
	
	cprintf("va of the first page that's connected pa %s = %x\n", arguments[1], ret);
	
	return 0;
}
/*---------------------------------------------------------*/

/*FILL this function
 * arguments[1]: physical address of the frame in HEXADECIMAL
 * Return:
 * 		Virtual address of the first page that's connected to the given physical address
 */
uint32 FindVirtualOfPhysical(char** arguments)
{
	//Assignment3.Q2
	//put your logic here
	//...
	

	return 0;
}


//========================================================
//Q3: Count number of pages that are BOTH Used and Modified inside a table (1 MARK)
/*DON'T change this function*/
int command_cum(int number_of_arguments, char **arguments )
{
	//DON'T WRITE YOUR LOGIC HERE, WRITE INSIDE THE CreateIntArray() FUNCTION
	int ret = CountUsedModifiedInTable(arguments);
	if (ret == -1)
		cprintf("Table not exists\n");
	else
		cprintf("num of USED-MODIFIED pages inside table# %s = %d\n", arguments[1], ret);

	return 0;
}
/*---------------------------------------------------------*/

/*FILL this function
 * arguments[1]: table number
 * Return:
 * 	If table exists, return number of free pages.
 * 	Else, return -1.
 */
int CountUsedModifiedInTable(char** arguments)
{
	//Assignment3.Q3
	//put your logic here
	//...

	return 0;
}

//========================================================
//Q4: Set Modified Pages in a Virtual Range to be NOT Used	(1 MARK)

/*DON'T change this function*/
int command_sm2nu(int number_of_arguments, char **arguments )
{
	//DON'T WRITE YOUR LOGIC HERE, WRITE INSIDE THE FindInArray() FUNCTION
	int cnt = SetModifiedPagesInRangeToNotUsed(arguments) ;
	cprintf("Number of AFFECTED PAGES (modified  that are set to NOT Used) = %d\n", cnt) ;

	return 0;
}
/*---------------------------------------------------------*/

/*FILL this function
 * arguments[1]: start virtual address of the range (in HEX)
 * arguments[2]: end virtual address of the range (in HEX)
 * Return:
 * 		number of AFFECTED PAGES (i.e. modified pages in the given range that are set to NOT USED)
Helpers:
 * You may need to use PERM_xxxxx constants
 * There's a constant in the code called PAGE_SIZE which equal to 4KB
 * You can use ROUNDDOWN and ROUNDUP functions in order to round the virtual addresses on multiple of PAGE_SIZE (4 KB)
 */
int SetModifiedPagesInRangeToNotUsed(char** arguments)
{
	//Assignment3.Q4
	//put your logic here
	//...
int counter = 0 ;
	char *va1 =(char*) strtol(arguments[1], NULL, 16) ;
	char* va2 =(char*) strtol(arguments[2], NULL, 16) ;
	uint32 *ptr_page_table = NULL;


	int i = (int)va2 - (int)va1;
while( i > 0 )
{
	get_page_table(ptr_page_directory,va1, 0, &ptr_page_table) ;
				int table_index = PTX(va1) ;
				uint32 check	= ptr_page_table[table_index] & PERM_MODIFIED;

	if (check != 0)
	{
		ptr_page_table[table_index] &= (~PERM_USED);
		counter++;
	}

	va1+=PAGE_SIZE;

	i -= PAGE_SIZE;
}



	return counter ;
}


//========================================================
//BONUS: Copy entire content of one page to another	(1.5 MARK)

/*DON'T change this function*/
int command_cp(int number_of_arguments, char **arguments )
{
	//DON'T WRITE YOUR LOGIC HERE, WRITE INSIDE THE FindInArray() FUNCTION
	int ret = CopyPage(arguments) ;
	if (ret == -1)
		cprintf("source or destination page doesn't exist\n") ;

	return 0;
}
/*---------------------------------------------------------*/

/*FILL this function
 * arguments[1]: source virtual address (in HEX)
 * arguments[2]: destination virtual address (in HEX)
 * Return:
 * 		If successful, return 0
 *		Else, if source or destination page doesn't exist, return -1
 */
int CopyPage(char** arguments)
{
	//Assignment3.BONUS
	//put your logic here
	//...

	return 0 ;
}

//========================================================
